// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  ApiPublicApiPostsListData,
  ApiPublicApiPostsListResponses,
  ApiPublicApiPostsCreateData,
  ApiPublicApiPostsCreateResponses,
  ApiPublicApiPostsDestroyData,
  ApiPublicApiPostsDestroyResponses,
  ApiPublicApiPostsRetrieveData,
  ApiPublicApiPostsRetrieveResponses,
  ApiPublicApiPostsPartialUpdateData,
  ApiPublicApiPostsPartialUpdateResponses,
  ApiPublicApiPostsUpdateData,
  ApiPublicApiPostsUpdateResponses,
  ApiPublicApiPostsPublishCreateData,
  ApiPublicApiPostsPublishCreateResponses,
  ApiPublicApiPostsUnpublishCreateData,
  ApiPublicApiPostsUnpublishCreateResponses,
  ApiPublicApiPostsByAuthorListData,
  ApiPublicApiPostsByAuthorListResponses,
  ApiPublicApiPostsPublishedListData,
  ApiPublicApiPostsPublishedListResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apiPublicApiPostsList = <ThrowOnError extends boolean = false>(
  options?: Options<ApiPublicApiPostsListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiPublicApiPostsListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/",
    ...options,
  });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apiPublicApiPostsCreate = <ThrowOnError extends boolean = false>(
  options: Options<ApiPublicApiPostsCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ApiPublicApiPostsCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apiPublicApiPostsDestroy = <ThrowOnError extends boolean = false>(
  options: Options<ApiPublicApiPostsDestroyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    ApiPublicApiPostsDestroyResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/{id}/",
    ...options,
  });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apiPublicApiPostsRetrieve = <ThrowOnError extends boolean = false>(
  options: Options<ApiPublicApiPostsRetrieveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ApiPublicApiPostsRetrieveResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/{id}/",
    ...options,
  });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apiPublicApiPostsPartialUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApiPublicApiPostsPartialUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ApiPublicApiPostsPartialUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/{id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * ViewSet for Post model with nested routing.
 */
export const apiPublicApiPostsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<ApiPublicApiPostsUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ApiPublicApiPostsUpdateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/{id}/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Publish post
 * Mark post as published
 */
export const apiPublicApiPostsPublishCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApiPublicApiPostsPublishCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ApiPublicApiPostsPublishCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/{id}/publish/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Unpublish post
 * Mark post as unpublished
 */
export const apiPublicApiPostsUnpublishCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ApiPublicApiPostsUnpublishCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ApiPublicApiPostsUnpublishCreateResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/{id}/unpublish/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get posts by author
 * Returns posts filtered by author
 */
export const apiPublicApiPostsByAuthorList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ApiPublicApiPostsByAuthorListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiPublicApiPostsByAuthorListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/by_author/",
    ...options,
  });
};

/**
 * Get published posts
 * Returns only published posts
 */
export const apiPublicApiPostsPublishedList = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ApiPublicApiPostsPublishedListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiPublicApiPostsPublishedListResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/public_api/posts/published/",
    ...options,
  });
};
